{"ast":null,"code":"import _asyncToGenerator from \"D:/freelancer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let JobService = /*#__PURE__*/(() => {\n  class JobService {\n    constructor(http) {\n      this.http = http;\n      this.API_BASE_URL = 'https://www.askyacham.com/api/jobs';\n      // Mock data for demonstration\n      this.mockJobs = [{\n        id: '1',\n        title: 'Senior Software Engineer',\n        company: 'Google',\n        location: 'Mountain View, CA',\n        type: 'full-time',\n        salary: '$150,000 - $200,000',\n        description: 'We are looking for a Senior Software Engineer to join our team and help build the next generation of web applications.',\n        requirements: ['JavaScript', 'TypeScript', 'React', 'Node.js', 'AWS', '5+ years experience'],\n        posted_date: '2 days ago',\n        company_logo: 'assets/google-logo.svg'\n      }, {\n        id: '2',\n        title: 'Frontend Developer',\n        company: 'Microsoft',\n        location: 'Seattle, WA',\n        type: 'full-time',\n        salary: '$120,000 - $160,000',\n        description: 'Join our frontend team to create beautiful and intuitive user interfaces for our enterprise applications.',\n        requirements: ['HTML', 'CSS', 'JavaScript', 'React', 'Angular', '3+ years experience'],\n        posted_date: '1 week ago',\n        company_logo: 'assets/microsoft-logo.svg'\n      }, {\n        id: '3',\n        title: 'Full Stack Developer',\n        company: 'Amazon',\n        location: 'Austin, TX',\n        type: 'remote',\n        salary: '$130,000 - $170,000',\n        description: 'Work on cutting-edge e-commerce solutions and cloud services as a Full Stack Developer.',\n        requirements: ['Python', 'JavaScript', 'React', 'Django', 'AWS', '4+ years experience'],\n        posted_date: '3 days ago',\n        company_logo: 'assets/amazon-logo.svg'\n      }, {\n        id: '4',\n        title: 'UX Designer',\n        company: 'Apple',\n        location: 'Cupertino, CA',\n        type: 'full-time',\n        salary: '$140,000 - $180,000',\n        description: 'Design intuitive and beautiful user experiences for our consumer products and services.',\n        requirements: ['Figma', 'Sketch', 'Adobe Creative Suite', 'User Research', '5+ years experience'],\n        posted_date: '5 days ago',\n        company_logo: 'assets/apple-logo.svg'\n      }, {\n        id: '5',\n        title: 'DevOps Engineer',\n        company: 'Netflix',\n        location: 'Los Gatos, CA',\n        type: 'contract',\n        salary: '$160,000 - $200,000',\n        description: 'Help scale our infrastructure and deployment pipelines to serve millions of users worldwide.',\n        requirements: ['Docker', 'Kubernetes', 'AWS', 'Terraform', 'Python', '6+ years experience'],\n        posted_date: '1 week ago',\n        company_logo: 'assets/netflix-logo.svg'\n      }, {\n        id: '6',\n        title: 'Product Manager',\n        company: 'Meta',\n        location: 'Menlo Park, CA',\n        type: 'full-time',\n        salary: '$170,000 - $220,000',\n        description: 'Lead product development for our social media platforms and drive user engagement.',\n        requirements: ['Product Strategy', 'Data Analysis', 'Agile', 'User Research', '7+ years experience'],\n        posted_date: '4 days ago',\n        company_logo: 'assets/meta-logo.svg'\n      }];\n    }\n    // Get all jobs\n    getJobs() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // In production, this would make an HTTP request\n        // For now, return mock data with delay to simulate API call\n        return new Promise(resolve => {\n          setTimeout(() => {\n            resolve([..._this.mockJobs]);\n          }, 500);\n        });\n      })();\n    }\n    // Search jobs\n    searchJobs(params) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        // In production, this would make an HTTP request with search parameters\n        // For now, filter mock data based on search parameters\n        return new Promise(resolve => {\n          setTimeout(() => {\n            let filteredJobs = [..._this2.mockJobs];\n            if (params.keywords) {\n              const keywords = params.keywords.toLowerCase();\n              filteredJobs = filteredJobs.filter(job => job.title.toLowerCase().includes(keywords) || job.company.toLowerCase().includes(keywords) || job.description.toLowerCase().includes(keywords) || job.requirements.some(req => req.toLowerCase().includes(keywords)));\n            }\n            if (params.location) {\n              const location = params.location.toLowerCase();\n              filteredJobs = filteredJobs.filter(job => job.location.toLowerCase().includes(location));\n            }\n            if (params.jobType) {\n              filteredJobs = filteredJobs.filter(job => job.type === params.jobType);\n            }\n            if (params.experience) {\n              // Simple experience filtering based on requirements\n              filteredJobs = filteredJobs.filter(job => {\n                const experienceReq = job.requirements.find(req => req.includes('years'));\n                if (params.experience === 'entry' && experienceReq) {\n                  return !experienceReq.includes('3+') && !experienceReq.includes('4+') && !experienceReq.includes('5+') && !experienceReq.includes('6+') && !experienceReq.includes('7+');\n                }\n                return true;\n              });\n            }\n            resolve(filteredJobs);\n          }, 300);\n        });\n      })();\n    }\n    // Load more jobs (pagination)\n    loadMoreJobs() {\n      return _asyncToGenerator(function* () {\n        // In production, this would make an HTTP request with pagination\n        // For now, return empty array to simulate no more jobs\n        return new Promise(resolve => {\n          setTimeout(() => {\n            resolve([]);\n          }, 500);\n        });\n      })();\n    }\n    // Get job by ID\n    getJobById(id) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        // In production, this would make an HTTP request\n        // For now, find in mock data\n        return new Promise(resolve => {\n          setTimeout(() => {\n            const job = _this3.mockJobs.find(j => j.id === id) || null;\n            resolve(job);\n          }, 200);\n        });\n      })();\n    }\n    // Apply for job\n    applyForJob(jobId, applicationData) {\n      return _asyncToGenerator(function* () {\n        // In production, this would make an HTTP POST request\n        // For now, simulate successful application\n        return new Promise(resolve => {\n          setTimeout(() => {\n            console.log('Application submitted for job:', jobId, applicationData);\n            resolve(true);\n          }, 1000);\n        });\n      })();\n    }\n    // Save job\n    saveJob(jobId) {\n      return _asyncToGenerator(function* () {\n        // In production, this would make an HTTP POST request\n        // For now, simulate successful save\n        return new Promise(resolve => {\n          setTimeout(() => {\n            console.log('Job saved:', jobId);\n            resolve(true);\n          }, 500);\n        });\n      })();\n    }\n    // Get saved jobs\n    getSavedJobs() {\n      return _asyncToGenerator(function* () {\n        // In production, this would make an HTTP request\n        // For now, return empty array\n        return new Promise(resolve => {\n          setTimeout(() => {\n            resolve([]);\n          }, 300);\n        });\n      })();\n    }\n    // Get job applications\n    getJobApplications() {\n      return _asyncToGenerator(function* () {\n        // In production, this would make an HTTP request\n        // For now, return empty array\n        return new Promise(resolve => {\n          setTimeout(() => {\n            resolve([]);\n          }, 300);\n        });\n      })();\n    }\n    static {\n      this.ɵfac = function JobService_Factory(t) {\n        return new (t || JobService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: JobService,\n        factory: JobService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return JobService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}