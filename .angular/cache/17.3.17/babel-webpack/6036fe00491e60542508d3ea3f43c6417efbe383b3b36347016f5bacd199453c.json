{"ast":null,"code":"import _asyncToGenerator from \"D:/freelancer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/snack-bar\";\nexport let EmailAuthService = /*#__PURE__*/(() => {\n  class EmailAuthService {\n    constructor(http, snackBar) {\n      this.http = http;\n      this.snackBar = snackBar;\n      this.API_BASE_URL = 'https://www.askyacham.com/api/auth';\n      this.otpSentSubject = new BehaviorSubject(false);\n      this.otpSent$ = this.otpSentSubject.asObservable();\n    }\n    // Send OTP for Email Authentication\n    sendOtp(email, action) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield _this.http.post(`${_this.API_BASE_URL}/send-otp`, {\n            email: email.toLowerCase().trim(),\n            action\n          }).toPromise();\n          if (response?.success) {\n            _this.otpSentSubject.next(true);\n            _this.showSuccess(`Verification code sent to ${email}`);\n          } else {\n            _this.showError(response?.error || 'Failed to send verification code');\n          }\n          return response || {\n            success: false,\n            error: 'Network error'\n          };\n        } catch (error) {\n          console.error('Send OTP error:', error);\n          _this.showError('Failed to send verification code');\n          return {\n            success: false,\n            error: error.message || 'Network error'\n          };\n        }\n      })();\n    }\n    // Verify OTP\n    verifyOtp(email, otp, action) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield _this2.http.post(`${_this2.API_BASE_URL}/verify-otp`, {\n            email: email.toLowerCase().trim(),\n            otp: otp.trim(),\n            action\n          }).toPromise();\n          if (response && response.success) {\n            _this2.otpSentSubject.next(false);\n            _this2.showSuccess(action === 'signin' ? 'Welcome back!' : 'Account created successfully!');\n          } else {\n            _this2.showError('Invalid verification code');\n          }\n          return response;\n        } catch (error) {\n          console.error('Verify OTP error:', error);\n          _this2.showError('Invalid verification code');\n          return {\n            success: false,\n            error: error.message || 'Network error'\n          };\n        }\n      })();\n    }\n    // Resend OTP\n    resendOtp(email, action) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield _this3.http.post(`${_this3.API_BASE_URL}/resend-otp`, {\n            email: email.toLowerCase().trim(),\n            action\n          }).toPromise();\n          if (response?.success) {\n            _this3.showSuccess('Verification code resent');\n          } else {\n            _this3.showError(response?.error || 'Failed to resend verification code');\n          }\n          return response || {\n            success: false,\n            error: 'Network error'\n          };\n        } catch (error) {\n          console.error('Resend OTP error:', error);\n          _this3.showError('Failed to resend verification code');\n          return {\n            success: false,\n            error: error.message || 'Network error'\n          };\n        }\n      })();\n    }\n    // Validate Email Format\n    isValidEmail(email) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      return emailRegex.test(email);\n    }\n    // Validate OTP Format\n    isValidOtp(otp) {\n      const otpRegex = /^\\d{6}$/;\n      return otpRegex.test(otp);\n    }\n    // Reset OTP State\n    resetOtpState() {\n      this.otpSentSubject.next(false);\n    }\n    // Utility Methods\n    showSuccess(message) {\n      this.snackBar.open(message, 'Close', {\n        duration: 3000,\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        panelClass: ['google-success-snackbar']\n      });\n    }\n    showError(message) {\n      this.snackBar.open(message, 'Close', {\n        duration: 5000,\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        panelClass: ['google-error-snackbar']\n      });\n    }\n    static {\n      this.ɵfac = function EmailAuthService_Factory(t) {\n        return new (t || EmailAuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatSnackBar));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: EmailAuthService,\n        factory: EmailAuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return EmailAuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}