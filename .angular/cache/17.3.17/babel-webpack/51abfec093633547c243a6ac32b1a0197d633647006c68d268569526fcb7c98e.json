{"ast":null,"code":"import _asyncToGenerator from \"D:/freelancer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"./auth.service\";\nexport let GoogleAuthService = /*#__PURE__*/(() => {\n  class GoogleAuthService {\n    constructor(http, router, snackBar, authService) {\n      this.http = http;\n      this.router = router;\n      this.snackBar = snackBar;\n      this.authService = authService;\n      this.GOOGLE_CLIENT_ID = '656381536461-b7alo137q7uk9q6qgar13c882pp4hqva.apps.googleusercontent.com';\n      this.API_BASE_URL = 'https://www.askyacham.com/api/auth';\n    }\n    // Initialize Google Identity Services\n    initializeGoogleIdentity() {\n      if (typeof window !== 'undefined' && window.google) {\n        window.google.accounts.id.initialize({\n          client_id: this.GOOGLE_CLIENT_ID,\n          callback: this.handleGoogleResponse.bind(this),\n          auto_select: false,\n          cancel_on_tap_outside: true\n        });\n      }\n    }\n    // Handle Google Identity Services Response\n    handleGoogleResponse(response) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          console.log('Google Identity Services response:', response);\n          // Decode JWT token\n          const payload = _this.decodeJwtPayload(response.credential);\n          console.log('Decoded JWT payload:', payload);\n          // Create user object\n          const user = {\n            id: payload.sub,\n            email: payload.email,\n            name: payload.name,\n            picture: payload.picture,\n            verified_email: payload.email_verified,\n            provider: 'google',\n            created_at: new Date().toISOString(),\n            last_login: new Date().toISOString()\n          };\n          // Set user session\n          _this.authService['setUserSession'](user);\n          _this.authService['currentUserSubject'].next(user);\n          _this.showSuccess('Welcome! Signed in successfully');\n          _this.router.navigate(['/dashboard']);\n        } catch (error) {\n          console.error('Error handling Google response:', error);\n          _this.showError('Failed to sign in with Google');\n        }\n      })();\n    }\n    // Decode JWT payload\n    decodeJwtPayload(token) {\n      try {\n        const base64Url = token.split('.')[1];\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function (c) {\n          return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n        }).join(''));\n        return JSON.parse(jsonPayload);\n      } catch (error) {\n        throw new Error('Invalid JWT token');\n      }\n    }\n    // Render Google Sign-In Button\n    renderGoogleSignInButton(elementId, action) {\n      if (typeof window !== 'undefined' && window.google) {\n        const buttonConfig = {\n          theme: 'outline',\n          size: 'large',\n          text: action === 'signin' ? 'signin_with' : 'signup_with',\n          shape: 'rectangular',\n          logo_alignment: 'left',\n          width: '100%'\n        };\n        window.google.accounts.id.renderButton(document.getElementById(elementId), buttonConfig);\n      }\n    }\n    // Handle OAuth callback (for server-side OAuth flow)\n    handleOAuthCallback(code, state) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const action = state.includes('signup') ? 'signup' : 'signin';\n          const callbackUrl = `${_this2.API_BASE_URL}/google/${action}/callback`;\n          // Exchange code for tokens\n          const response = yield _this2.http.post(callbackUrl, {\n            code,\n            state\n          }).toPromise();\n          if (response?.success && response.user) {\n            _this2.authService['setUserSession'](response.user);\n            _this2.authService['currentUserSubject'].next(response.user);\n            _this2.showSuccess(action === 'signup' ? 'Account created successfully!' : 'Welcome back!');\n            _this2.router.navigate(['/dashboard']);\n          } else {\n            _this2.showError(response?.error || 'Authentication failed');\n          }\n        } catch (error) {\n          console.error('OAuth callback error:', error);\n          _this2.showError('Authentication failed');\n        }\n      })();\n    }\n    // Clear Google Cache (for signup to force consent)\n    clearGoogleCache() {\n      try {\n        // Clear Google Identity Services\n        if (window.google?.accounts) {\n          window.google.accounts.id.disableAutoSelect();\n          window.google.accounts.id.cancel();\n        }\n        // Clear legacy GAPI\n        if (window.gapi?.auth2) {\n          window.gapi.auth2.getAuthInstance()?.signOut();\n        }\n        // Clear storage\n        localStorage.removeItem('gapi');\n        localStorage.removeItem('google_auth');\n        sessionStorage.clear();\n        // Clear cookies\n        document.cookie.split(\";\").forEach(function (c) {\n          document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\n        });\n      } catch (error) {\n        console.warn('Error clearing Google cache:', error);\n      }\n    }\n    // Utility Methods\n    showSuccess(message) {\n      this.snackBar.open(message, 'Close', {\n        duration: 3000,\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        panelClass: ['google-success-snackbar']\n      });\n    }\n    showError(message) {\n      this.snackBar.open(message, 'Close', {\n        duration: 5000,\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        panelClass: ['google-error-snackbar']\n      });\n    }\n    static {\n      this.ɵfac = function GoogleAuthService_Factory(t) {\n        return new (t || GoogleAuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatSnackBar), i0.ɵɵinject(i4.AuthService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: GoogleAuthService,\n        factory: GoogleAuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return GoogleAuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}