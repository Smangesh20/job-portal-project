{"ast":null,"code":"import _asyncToGenerator from \"D:/freelancer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/material/snack-bar\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router, snackBar) {\n      this.http = http;\n      this.router = router;\n      this.snackBar = snackBar;\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.API_BASE_URL = 'https://www.askyacham.com/api/auth';\n      this.initializeAuth();\n    }\n    initializeAuth() {\n      // Check for existing session on app initialization\n      const userSession = this.getUserSession();\n      if (userSession) {\n        this.currentUserSubject.next(userSession);\n      }\n    }\n    // Google Authentication\n    signInWithGoogle() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // Redirect to Google OAuth for signin\n          window.location.href = `${_this.API_BASE_URL}/google/signin`;\n        } catch (error) {\n          console.error('Google signin error:', error);\n          _this.showError('Failed to sign in with Google');\n        }\n      })();\n    }\n    signUpWithGoogle() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // Clear any existing Google cache\n          _this2.clearGoogleCache();\n          // Redirect to Google OAuth for signup with consent\n          window.location.href = `${_this2.API_BASE_URL}/google/signup`;\n        } catch (error) {\n          console.error('Google signup error:', error);\n          _this2.showError('Failed to sign up with Google');\n        }\n      })();\n    }\n    // Email Authentication with OTP\n    sendOtp(email, action) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield _this3.http.post(`${_this3.API_BASE_URL}/send-otp`, {\n            email,\n            action\n          }).toPromise();\n          if (response?.success) {\n            _this3.showSuccess(`Verification code sent to ${email}`);\n          }\n          return response || {\n            success: false,\n            error: 'Failed to send OTP'\n          };\n        } catch (error) {\n          console.error('Send OTP error:', error);\n          _this3.showError('Failed to send verification code');\n          return {\n            success: false,\n            error: error.message || 'Network error'\n          };\n        }\n      })();\n    }\n    verifyOtp(email, otp, action) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const response = yield _this4.http.post(`${_this4.API_BASE_URL}/verify-otp`, {\n            email,\n            otp,\n            action\n          }).toPromise();\n          if (response?.success && response.user) {\n            _this4.setUserSession(response.user);\n            _this4.currentUserSubject.next(response.user);\n            _this4.showSuccess(action === 'signin' ? 'Welcome back!' : 'Account created successfully!');\n            _this4.router.navigate(['/dashboard']);\n          }\n          return response || {\n            success: false,\n            error: 'Failed to verify OTP'\n          };\n        } catch (error) {\n          console.error('Verify OTP error:', error);\n          _this4.showError('Invalid verification code');\n          return {\n            success: false,\n            error: error.message || 'Network error'\n          };\n        }\n      })();\n    }\n    // Session Management\n    setUserSession(user) {\n      const sessionData = {\n        ...user,\n        session_token: this.generateSessionToken(),\n        expires_at: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days\n      };\n      localStorage.setItem('user_session', JSON.stringify(sessionData));\n    }\n    getUserSession() {\n      try {\n        const sessionData = localStorage.getItem('user_session');\n        if (!sessionData) return null;\n        const session = JSON.parse(sessionData);\n        // Check if session is expired\n        if (new Date(session.expires_at) < new Date()) {\n          this.logout();\n          return null;\n        }\n        return session;\n      } catch (error) {\n        console.error('Error reading user session:', error);\n        this.logout();\n        return null;\n      }\n    }\n    generateSessionToken() {\n      return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n    }\n    // Logout\n    logout() {\n      this.clearGoogleCache();\n      localStorage.removeItem('user_session');\n      this.currentUserSubject.next(null);\n      this.router.navigate(['/auth/signin']);\n      this.showSuccess('Signed out successfully');\n    }\n    // Google Cache Clearing\n    clearGoogleCache() {\n      try {\n        // Clear localStorage\n        localStorage.removeItem('gapi');\n        localStorage.removeItem('google_auth');\n        // Clear sessionStorage\n        sessionStorage.clear();\n        // Clear Google OAuth cookies\n        document.cookie.split(\";\").forEach(function (c) {\n          document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\n        });\n        // Clear Google Identity Services cache\n        if (window.google?.accounts) {\n          window.google.accounts.id.disableAutoSelect();\n          window.google.accounts.id.cancel();\n        }\n        // Clear legacy GAPI cache\n        if (window.gapi?.auth2) {\n          window.gapi.auth2.getAuthInstance()?.signOut();\n        }\n      } catch (error) {\n        console.warn('Error clearing Google cache:', error);\n      }\n    }\n    // Utility Methods\n    isAuthenticated() {\n      return this.currentUserSubject.value !== null;\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    showSuccess(message) {\n      this.snackBar.open(message, 'Close', {\n        duration: 3000,\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        panelClass: ['google-success-snackbar']\n      });\n    }\n    showError(message) {\n      this.snackBar.open(message, 'Close', {\n        duration: 5000,\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        panelClass: ['google-error-snackbar']\n      });\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(t) {\n        return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.MatSnackBar));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}